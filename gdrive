#!/usr/bin/env python3

import pickle
import os.path
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.http import MediaIoBaseDownload
from googleapiclient.http import MediaFileUpload
import io
import sys
import mimetypes
from os.path import expanduser

home = expanduser("~")
gdrive_path = home + '/.gdrive/'
credentials_path = gdrive_path + 'credentials.json'
token_path = gdrive_path + 'token.pickle'

# If modifying these scopes, delete the file token.pickle.
SCOPES = [
    'https://www.googleapis.com/auth/drive',
    'https://www.googleapis.com/auth/drive.metadata'
  ]

functions = ['download', 'upload']

def init():
    """Shows basic usage of the Drive v3 API.
    Prints the names and ids of the first 10 files the user has access to.
    """
    creds = None
    # The file token.pickle stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists(token_path):
        with open(token_path, 'rb') as token:
            creds = pickle.load(token)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                credentials_path, SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open(token_path, 'wb') as token:
            pickle.dump(creds, token)
    service = build('drive', 'v3', credentials=creds)
    return service

def find_file(service, file_id):
    print('Searching for file with ID: %s' % file_id)
    page_token = None
    while True:
        response = service.files().list(
                                      fields='nextPageToken, files(id, name)',
                                      pageToken=page_token).execute()
        for file_server in response.get('files', []):
            # Process change
            file_server_id = file_server.get('id')
            if file_id == file_server_id:
                print('Found file: %s (%s)' % (file_server.get('name'), file_server.get('id')))
                return file_server
        page_token = response.get('nextPageToken', None)
        if page_token is None:
            break
    print('File id: %s not found' % file_id)

def upload(service, filename):
    guessed_type = mimetypes.guess_type(filename, True)
    if guessed_type is None:
        print('Wasn`t able to guess mimetype.')
        return
    mime_type = guessed_type[0]

    print('Uploading the file: %s' % filename)

    try:
        file_metadata = {'name': filename}
        media = MediaFileUpload(filename,
                            mimetype=mime_type)
        created_file = service.files().create(body=file_metadata,
                                        media_body=media,
                                        fields='id').execute()
        print('File ID: %s' % created_file.get('id'))
    except Exception as err:
        print('An error occurred while uploading the file.')
        print(err)


def download(service, file_id):
    if file_id is None:
        print('Please informe the ID of the file you want to download. Exiting..')
        return

    found_file = find_file(service, file_id)
    if found_file == None:
        print('Could not find the file in your drive with ID: %s' % file_id)
        return

    filename = found_file['name']
    print('Downloading file %s' % filename)

    try:
        request = service.files().get_media(fileId=file_id)
        # fh = io.BytesIO()
        fh = io.FileIO(filename, 'wb')
        downloader = MediaIoBaseDownload(fh, request)
        done = False
        while done is False:
            status, done = downloader.next_chunk()
            print("Download %d%%." % int(status.progress() * 100))
    except Exception as err:
        print('An error happened while downloading the file.')
        print(err)

def main():
    #print('Argument List:', str(sys.argv))
    args_size = len(sys.argv)
    if args_size < 3:
        print('Not enough arguments. Exiting..')
        return

    func = sys.argv[1]
    if not func in functions:
        print('This function is not implemented yet.')
        return

    service = init()
    if service is None:
        print('Failed to start service. Exiting..')
        return


    if func == 'download':
        download(service, sys.argv[2])
    else:
        upload(service, sys.argv[2])

if __name__ == '__main__':
    main()
